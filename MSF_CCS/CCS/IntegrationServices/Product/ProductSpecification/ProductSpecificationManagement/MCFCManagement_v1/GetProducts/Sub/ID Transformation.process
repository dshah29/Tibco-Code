<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://three.co.uk/xsd/cdm/common/commondefinitions/udf/v1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns1="http://three.co.uk/xsd/interface/product/productspecification/productspecificationmanagement/mcfcmanagement/v1" xmlns:ns="http://three.co.uk/xsd/cdm/product/productspecification/productspecificationmanagement/productspecification/v1" xmlns:ns4="http://three.co.uk/xsd/cdm/product/productspecification/productspecificationmanagement/productallowance/v1" xmlns:ns3="http://three.co.uk/xsd/cdm/product/productspecification/productspecificationmanagement/productpricespecification/v1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns5="http://three.co.uk/xsd/cdm/product/productusage/productusagemanagement/productusage/v1" xmlns:pfx="http://three.co.uk/xsd/resource/common/commondefinitions/msf/exception/v1">
    <xsd:import namespace="http://three.co.uk/xsd/resource/common/commondefinitions/msf/exception/v1" schemaLocation="/SharedResources/SchemaDefinitions/Resource/Common/CommonDefinitions/MSF/Exception_v1.xsd"/>
    <xsd:import namespace="http://three.co.uk/xsd/interface/product/productspecification/productspecificationmanagement/mcfcmanagement/v1" schemaLocation="/SharedResources/SchemaDefinitions/Interface/Product/ProductSpecification/ProductSpecificationManagement/MCFCManagement_v1.xsd"/>
    <pd:name>IntegrationServices/Product/ProductSpecification/ProductSpecificationManagement/MCFCManagement_v1/GetProducts/Sub/ID Transformation.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="ns1:GetProductsRequest"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>48</pd:startX>
    <pd:startY>133</pd:startY>
    <pd:returnBindings>
        <root>
            <ns1:GetProductsRequest>
                <xsl:choose>
                    <xsl:when test="exists($ACP/AccumulatedOutput/root/ns1:PredefinedTransformation)">
                        <xsl:copy-of select="$ACP/AccumulatedOutput/root/ns1:PredefinedTransformation"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="$AddToCache/root/PredefinedTransformation[From/name!=&quot;NA&quot;]">
                            <ns1:PredefinedTransformation>
                                <ns1:Segment>
                                    <xsl:value-of select="Segment"/>
                                </ns1:Segment>
                                <xsl:for-each select="From">
                                    <ns1:From>
                                        <ns1:name>
                                            <xsl:value-of select="name"/>
                                        </ns1:name>
                                        <xsl:if test="value">
                                            <ns1:value>
                                                <xsl:value-of select="value"/>
                                            </ns1:value>
                                        </xsl:if>
                                    </ns1:From>
                                </xsl:for-each>
                                <xsl:for-each select="To">
                                    <ns1:To>
                                        <ns1:name>
                                            <xsl:value-of select="name"/>
                                        </ns1:name>
                                        <xsl:if test="value">
                                            <ns1:value>
                                                <xsl:value-of select="value"/>
                                            </ns1:value>
                                        </xsl:if>
                                    </ns1:To>
                                </xsl:for-each>
                            </ns1:PredefinedTransformation>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </ns1:GetProductsRequest>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="ns1:GetProductsRequest"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>790</pd:endX>
    <pd:endY>341</pd:endY>
    <pd:errorSchemas>
        <Schema0 ref="pfx:Exception"/>
    </pd:errorSchemas>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1453477897335</pd:targetNamespace>
    <pd:group name="Build Cache">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>76</pd:x>
        <pd:y>255</pd:y>
        <pd:width>427</pd:width>
        <pd:height>183</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$Start/root/ns1:GetProductsRequest/ns1:PredefinedTransformation</pd:over>
            <pd:iterationElementSlot>NewProduct</pd:iterationElementSlot>
            <pd:indexSlot>n</pd:indexSlot>
            <pd:outSlot>SV</pd:outSlot>
            <pd:activityOutputName>AddToCache</pd:activityOutputName>
            <pd:accumulateOutput>false</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>PresentCache</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>AddToCache</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GetProducts From FC</pd:from>
            <pd:to>AddToCache</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>PresentCache</pd:from>
            <pd:to>GetProducts From FC</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="GetProducts From FC">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>279</pd:x>
            <pd:y>350</pd:y>
            <config>
                <processName>/IntegrationServices/Product/ProductSpecification/ProductSpecificationManagement/MCFCManagement_v1/GetProducts/Sub/GetProducts.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns1:GetProductsRequest>
                        <ns1:ProductFilter>
                            <xsl:if test="exists($NewProduct/ns1:PredefinedTransformation/ns1:From[ns1:name='ProductID']/ns1:value)">
                                <ns1:productID>
                                    <xsl:value-of select="$NewProduct/ns1:PredefinedTransformation/ns1:From[ns1:name='ProductID']/ns1:value"/>
                                </ns1:productID>
                            </xsl:if>
                            <ns1:repository>
                                <xsl:value-of select="'PRODUCT'"/>
                            </ns1:repository>
                        </ns1:ProductFilter>
                        <ns1:View>
                            <xsl:copy-of select="$Start/root/ns1:GetProductsRequest/ns1:View/ns1:Return"/>
                            <xsl:if test="exists($NewProduct/ns1:PredefinedTransformation/ns1:From[ns1:name!='ProductID']/ns1:value)">
                                <ns1:Relation>
                                    <ns1:Relationship>
                                        <ns1:relationshipValue>
                                            <xsl:value-of select="$NewProduct/ns1:PredefinedTransformation/ns1:From[ns1:name!='ProductID']/ns1:value"/>
                                        </ns1:relationshipValue>
                                        <ns1:type>
                                            <xsl:value-of select="'Characteristic'"/>
                                        </ns1:type>
                                    </ns1:Relationship>
                                </ns1:Relation>
                            </xsl:if>
                        </ns1:View>
                    </ns1:GetProductsRequest>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="AddToCache">
            <pd:type>com.tibco.pe.core.SetSharedVariableActivity</pd:type>
            <pd:resourceType>ae.activities.setSharedVariable</pd:resourceType>
            <pd:x>420</pd:x>
            <pd:y>350</pd:y>
            <config>
                <variableConfig>/IntegrationServices/Product/ProductSpecification/ProductSpecificationManagement/MCFCManagement_v1/GetProducts/Sub/Product ID Cache.sharedvariable</variableConfig>
                <showResult>true</showResult>
            </config>
            <pd:inputBindings>
                <root>
                    <xsl:copy-of select="$PresentCache/root/PredefinedTransformation"/>
                    <xsl:if test="(string-length($GetProducts-From-FC/root/ns1:GetProductsResponse/ns:productSpecification[1]/ns:productCharacteristics/ns2:UDF[ns2:name=ns1:To/ns1:name]/ns2:value)>0 or&#xA;string-length($GetProducts-From-FC/root/ns1:GetProductsResponse/ns:productSpecification[1]/ns:productID)>0)">
                        <xsl:for-each select="$GetProducts-From-FC/root/ns1:GetProductsResponse/ns:productSpecification/ns:productCharacteristics/ns2:UDF[ns2:name='Segment_ProductType' and ns2:value=$NewProduct/ns1:PredefinedTransformation/ns1:Segment][1]">
                            <xsl:for-each select="$NewProduct/ns1:PredefinedTransformation[ns1:Segment=current()/ns2:value]">
                                <PredefinedTransformation>
                                    <Segment>
                                        <xsl:value-of select="ns1:Segment"/>
                                    </Segment>
                                    <xsl:for-each select="ns1:From">
                                        <From>
                                            <name>
                                                <xsl:value-of select="ns1:name"/>
                                            </name>
                                            <xsl:if test="ns1:value">
                                                <value>
                                                    <xsl:value-of select="ns1:value"/>
                                                </value>
                                            </xsl:if>
                                        </From>
                                    </xsl:for-each>
                                    <xsl:choose>
                                        <xsl:when test="ns1:From/ns1:name='ProductID'">
                                            <To>
                                                <name>
                                                    <xsl:value-of select="ns1:To/ns1:name"/>
                                                </name>
                                                <value>
                                                    <xsl:value-of select="$GetProducts-From-FC/root/ns1:GetProductsResponse/ns:productSpecification[1]/ns:productCharacteristics/ns2:UDF[ns2:name=current()/ns1:To/ns1:name]/ns2:value"/>
                                                </value>
                                            </To>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <To>
                                                <name>
                                                    <xsl:value-of select="ns1:To/ns1:name"/>
                                                </name>
                                                <value>
                                                    <xsl:value-of select="$GetProducts-From-FC/root/ns1:GetProductsResponse/ns:productSpecification[1]/ns:productID"/>
                                                </value>
                                            </To>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </PredefinedTransformation>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:if>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="PresentCache">
            <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
            <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
            <pd:x>149</pd:x>
            <pd:y>348</pd:y>
            <config>
                <variableConfig>/IntegrationServices/Product/ProductSpecification/ProductSpecificationManagement/MCFCManagement_v1/GetProducts/Sub/Product ID Cache.sharedvariable</variableConfig>
            </config>
            <pd:inputBindings/>
        </pd:activity>
    </pd:group>
    <pd:group name="BuildPartialCache">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>427</pd:x>
        <pd:y>2</pd:y>
        <pd:width>714</pd:width>
        <pd:height>248</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$Start/root/ns1:GetProductsRequest/ns1:PredefinedTransformation
{-- $Get-ProductIDs/root/ProductID[PeoplesoftID!="NA"] --}</pd:over>
            <pd:iterationElementSlot>CacheProducts</pd:iterationElementSlot>
            <pd:indexSlot>i</pd:indexSlot>
            <pd:outSlot>ACP</pd:outSlot>
            <pd:activityOutputName>CompleteList</pd:activityOutputName>
            <pd:accumulateOutput>true</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>Check</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>CompleteList</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Check</pd:from>
            <pd:to>Captured Transformation</pd:to>
            <pd:xpathDescription>Found In Cache</pd:xpathDescription>
            <pd:lineType>Curved</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>$LoadRelationships/root/PredefinedTransformation
[
From/name=$CacheProducts/ns1:PredefinedTransformation/ns1:From/ns1:name
and
From/value=$CacheProducts/ns1:PredefinedTransformation/ns1:From/ns1:value
and
To/name=$CacheProducts/ns1:PredefinedTransformation/ns1:To/ns1:name
]/Segment=$CacheProducts/ns1:PredefinedTransformation/ns1:Segment</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>Check</pd:from>
            <pd:to>Get PresentCache</pd:to>
            <pd:xpathDescription>Not Found</pd:xpathDescription>
            <pd:lineType>Curved</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Captured Transformation</pd:from>
            <pd:to>CompleteList</pd:to>
            <pd:lineType>Multiple Bends</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GetProducts from FC  Again</pd:from>
            <pd:to>Add More To Cache</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Add More To Cache</pd:from>
            <pd:to>Captured Transformation</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Get PresentCache</pd:from>
            <pd:to>GetProducts from FC  Again</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="Captured Transformation">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>890</pd:x>
            <pd:y>65</pd:y>
            <config>
                <element>
                    <xsd:element name="root">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element ref="ns1:PredefinedTransformation" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </element>
            </config>
            <pd:inputBindings>
                <root>
                    <xsl:choose>
                        <xsl:when test="exists($Add-More-To-Cache/root/PredefinedTransformation)">
                            <xsl:variable name="var" select="$CacheProducts/ns1:PredefinedTransformation/ns1:From/ns1:name"/>
                            <xsl:variable name="var2" select="$CacheProducts/ns1:PredefinedTransformation/ns1:To/ns1:name"/>
                            <xsl:for-each select="$Add-More-To-Cache/root/PredefinedTransformation[From/name=$var  and To/name=$var2 and From/value=$CacheProducts/ns1:PredefinedTransformation/ns1:From/ns1:value and Segment=$CacheProducts/ns1:PredefinedTransformation/ns1:Segment]">
                                <ns1:PredefinedTransformation>
                                    <ns1:Segment>
                                        <xsl:value-of select="Segment"/>
                                    </ns1:Segment>
                                    <xsl:for-each select="From">
                                        <ns1:From>
                                            <ns1:name>
                                                <xsl:value-of select="name"/>
                                            </ns1:name>
                                            <xsl:if test="value">
                                                <ns1:value>
                                                    <xsl:value-of select="value"/>
                                                </ns1:value>
                                            </xsl:if>
                                        </ns1:From>
                                    </xsl:for-each>
                                    <xsl:for-each select="To">
                                        <ns1:To>
                                            <ns1:name>
                                                <xsl:value-of select="name"/>
                                            </ns1:name>
                                            <xsl:if test="value">
                                                <ns1:value>
                                                    <xsl:value-of select="value"/>
                                                </ns1:value>
                                            </xsl:if>
                                        </ns1:To>
                                    </xsl:for-each>
                                </ns1:PredefinedTransformation>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:for-each select="$LoadRelationships/root/PredefinedTransformation[From/name=$CacheProducts/ns1:PredefinedTransformation/ns1:From/ns1:name and To/name=$CacheProducts/ns1:PredefinedTransformation/ns1:To/ns1:name and From/value=$CacheProducts/ns1:PredefinedTransformation/ns1:From/ns1:value and Segment=$CacheProducts/ns1:PredefinedTransformation/ns1:Segment]">
                                <ns1:PredefinedTransformation>
                                    <ns1:Segment>
                                        <xsl:value-of select="Segment"/>
                                    </ns1:Segment>
                                    <xsl:for-each select="From">
                                        <ns1:From>
                                            <ns1:name>
                                                <xsl:value-of select="name"/>
                                            </ns1:name>
                                            <xsl:if test="value">
                                                <ns1:value>
                                                    <xsl:value-of select="value"/>
                                                </ns1:value>
                                            </xsl:if>
                                        </ns1:From>
                                    </xsl:for-each>
                                    <xsl:for-each select="To">
                                        <ns1:To>
                                            <ns1:name>
                                                <xsl:value-of select="name"/>
                                            </ns1:name>
                                            <xsl:if test="value">
                                                <ns1:value>
                                                    <xsl:value-of select="value"/>
                                                </ns1:value>
                                            </xsl:if>
                                        </ns1:To>
                                    </xsl:for-each>
                                </ns1:PredefinedTransformation>
                            </xsl:for-each>
                        </xsl:otherwise>
                    </xsl:choose>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Check">
            <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
            <pd:resourceType>ae.activities.null</pd:resourceType>
            <pd:x>510</pd:x>
            <pd:y>135</pd:y>
            <config/>
            <pd:inputBindings/>
        </pd:activity>
        <pd:activity name="CompleteList">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>1046</pd:x>
            <pd:y>133</pd:y>
            <config>
                <element>
                    <xsd:element name="root">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element ref="ns1:PredefinedTransformation" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </element>
            </config>
            <pd:inputBindings>
                <root>
                    <xsl:copy-of select="$Captured-Transformation/root/ns1:PredefinedTransformation"/>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="GetProducts from FC  Again">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>772</pd:x>
            <pd:y>183</pd:y>
            <config>
                <processName>/IntegrationServices/Product/ProductSpecification/ProductSpecificationManagement/MCFCManagement_v1/GetProducts/Sub/GetProducts.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns1:GetProductsRequest>
                        <ns1:ProductFilter>
                            <xsl:if test="exists($CacheProducts/ns1:PredefinedTransformation/ns1:From[ns1:name='ProductID']/ns1:value)">
                                <xsl:if test="$CacheProducts/ns1:PredefinedTransformation/ns1:From[ns1:name='ProductID']/ns1:value">
                                    <ns1:productID>
                                        <xsl:value-of select="$CacheProducts/ns1:PredefinedTransformation/ns1:From[ns1:name='ProductID']/ns1:value"/>
                                    </ns1:productID>
                                </xsl:if>
                            </xsl:if>
                            <ns1:repository>
                                <xsl:value-of select="'PRODUCT'"/>
                            </ns1:repository>
                        </ns1:ProductFilter>
                        <ns1:View>
                            <xsl:copy-of select="$Start/root/ns1:GetProductsRequest/ns1:View/ns1:Return"/>
                            <xsl:if test="exists($CacheProducts/ns1:PredefinedTransformation/ns1:From[ns1:name!='ProductID']/ns1:value)">
                                <ns1:Relation>
                                    <ns1:Relationship>
                                        <ns1:relationshipValue>
                                            <xsl:value-of select="$CacheProducts/ns1:PredefinedTransformation/ns1:From[ns1:name!='ProductID']/ns1:value"/>
                                        </ns1:relationshipValue>
                                        <ns1:type>
                                            <xsl:value-of select="'Characteristic'"/>
                                        </ns1:type>
                                    </ns1:Relationship>
                                </ns1:Relation>
                            </xsl:if>
                        </ns1:View>
                    </ns1:GetProductsRequest>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Add More To Cache">
            <pd:type>com.tibco.pe.core.SetSharedVariableActivity</pd:type>
            <pd:resourceType>ae.activities.setSharedVariable</pd:resourceType>
            <pd:x>890</pd:x>
            <pd:y>174</pd:y>
            <config>
                <variableConfig>/IntegrationServices/Product/ProductSpecification/ProductSpecificationManagement/MCFCManagement_v1/GetProducts/Sub/Product ID Cache.sharedvariable</variableConfig>
                <showResult>true</showResult>
            </config>
            <pd:inputBindings>
                <root>
                    <xsl:copy-of select="$Get-PresentCache/root/PredefinedTransformation"/>
                    <xsl:if test="(string-length($GetProducts-from-FC--Again/root/ns1:GetProductsResponse/ns:productSpecification[1]/ns:productID)>0 or&#xA;string-length($GetProducts-from-FC--Again/root/ns1:GetProductsResponse/ns:productSpecification[1]/ns:productCharacteristics/ns2:UDF[ns2:name=ns1:To/ns1:name]/ns2:value)>0)">
                        <xsl:for-each select="$GetProducts-from-FC--Again/root/ns1:GetProductsResponse/ns:productSpecification/ns:productCharacteristics/ns2:UDF[ns2:name='Segment_ProductType' and ns2:value=$CacheProducts/ns1:PredefinedTransformation/ns1:Segment][1]">
                            <xsl:for-each select="$CacheProducts/ns1:PredefinedTransformation[ns1:Segment=current()/ns2:value]">
                                <PredefinedTransformation>
                                    <Segment>
                                        <xsl:value-of select="ns1:Segment"/>
                                    </Segment>
                                    <xsl:for-each select="ns1:From">
                                        <From>
                                            <name>
                                                <xsl:value-of select="ns1:name"/>
                                            </name>
                                            <xsl:if test="ns1:value">
                                                <value>
                                                    <xsl:value-of select="ns1:value"/>
                                                </value>
                                            </xsl:if>
                                        </From>
                                    </xsl:for-each>
                                    <xsl:choose>
                                        <xsl:when test="ns1:From/ns1:name='ProductID'">
                                            <To>
                                                <name>
                                                    <xsl:value-of select="ns1:To/ns1:name"/>
                                                </name>
                                                <value>
                                                    <xsl:value-of select="$GetProducts-from-FC--Again/root/ns1:GetProductsResponse/ns:productSpecification[1]/ns:productCharacteristics/ns2:UDF[ns2:name=current()/ns1:To/ns1:name]/ns2:value"/>
                                                </value>
                                            </To>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <To>
                                                <name>
                                                    <xsl:value-of select="ns1:To/ns1:name"/>
                                                </name>
                                                <value>
                                                    <xsl:value-of select="$GetProducts-from-FC--Again/root/ns1:GetProductsResponse/ns:productSpecification[1]/ns:productID"/>
                                                </value>
                                            </To>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </PredefinedTransformation>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:if>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Get PresentCache">
            <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
            <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
            <pd:x>653</pd:x>
            <pd:y>173</pd:y>
            <config>
                <variableConfig>/IntegrationServices/Product/ProductSpecification/ProductSpecificationManagement/MCFCManagement_v1/GetProducts/Sub/Product ID Cache.sharedvariable</variableConfig>
            </config>
            <pd:inputBindings/>
        </pd:activity>
    </pd:group>
    <pd:activity name="LoadRelationships">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>160</pd:x>
        <pd:y>134</pd:y>
        <config>
            <variableConfig>/IntegrationServices/Product/ProductSpecification/ProductSpecificationManagement/MCFCManagement_v1/GetProducts/Sub/Product ID Cache.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Null">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>284</pd:x>
        <pd:y>135</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>LoadRelationships</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LoadRelationships</pd:from>
        <pd:to>Null</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>Build Cache</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>BuildPartialCache</pd:to>
        <pd:xpathDescription>Cache Exists</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>count($LoadRelationships/root/PredefinedTransformation)&gt;1</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Build Cache</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>BuildPartialCache</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>