<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://www.tibco.com/pe/EngineTypes" xmlns:pfx="http://three.co.uk/xsd/Interface/billing/billingpayment/billingpaymentmanagement/mcsingleview/v1" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://three.co.uk/xsd/resource/common/commondefinitions/msf/messagecontext/v1" xmlns:ns1="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/TREAdapters/TRE/in/Reply" xmlns:ns3="http://www.tibco.com/xmlns/ae2xsd/2002/05/sequence/ae" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx2="http://three.co.uk/xsd/resource/common/commondefinitions/msf/exception/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pfx6="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/TREAdapters/TRE/in/Request">
    <xsd:import namespace="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/TREAdapters/TRE/in/Request" schemaLocation="/AESchemas/ae/TREAdapters/TRE/in/Request.aeschema"/>
    <xsd:import namespace="http://three.co.uk/xsd/Interface/billing/billingpayment/billingpaymentmanagement/mcsingleview/v1" schemaLocation="/SharedResources/SchemaDefinitions/Interface/Billing/BillingPayment/BillingPaymentManagement/MC_SingleView_v1.xsd"/>
    <xsd:import namespace="http://three.co.uk/xsd/resource/common/commondefinitions/msf/exception/v1" schemaLocation="/SharedResources/SchemaDefinitions/Resource/Common/CommonDefinitions/MSF/Exception_v1.xsd"/>
    <xsd:import namespace="http://www.tibco.com/xmlns/ae2xsd/2002/05/ae/TREAdapters/TRE/in/Request" schemaLocation="/AESchemas/ae/TREAdapters/TRE/in/Request.aeschema"/>
    <xsd:import namespace="http://www.tibco.com/xmlns/ae2xsd/2002/05/sequence/ae" schemaLocation="/AESchemas/sequence/ae.aeschema"/>
    <pd:name>IntegrationServices/Billing/BillingPayment/BillingPaymentManagement/MC_SingleView_v1/POSUpgradeNoCPP/Main/MainProcess.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:POSUpgradeNoCPPRequest"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>36</pd:startX>
    <pd:startY>58</pd:startY>
    <pd:returnBindings>
        <root>
            <xsl:copy-of select="$CreateResponse/pfx:POSUpgradeNoCPPResponse"/>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:POSUpgradeNoCPPResponse"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>1007</pd:endX>
    <pd:endY>59</pd:endY>
    <pd:errorSchemas>
        <Schema0 ref="pfx2:Exception"/>
    </pd:errorSchemas>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1441188291513</pd:targetNamespace>
    <pd:activity name="CamelCase to UpperCase">
        <pd:type>com.tibco.plugin.xml.XMLTransformActivity</pd:type>
        <pd:resourceType>ae.activities.XMLTransformActivity</pd:resourceType>
        <pd:x>439</pd:x>
        <pd:y>66</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <engine>Saxon</engine>
            <stylesheet>/SharedResources/XSLT/Billing/BillingPayment/BillingPaymentManagement/CamelCase_2_UpperCase.xsl</stylesheet>
        </config>
        <pd:inputBindings>
            <textInput>
                <xmlString>
                    <xsl:value-of select="tib:render-xml($Create-Request/pfx6:fHUK__POSUpgrade__NoCPP)"/>
                </xmlString>
            </textInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Create Request">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>339</pd:x>
        <pd:y>59</pd:y>
        <config>
            <element ref="pfx6:fHUK__POSUpgrade__NoCPP"/>
        </config>
        <pd:inputBindings>
            <pfx6:fHUK__POSUpgrade__NoCPP>
                <PackageInstId>
                    <xsl:value-of select="$Start/root/pfx:POSUpgradeNoCPPRequest/pfx:packageInstanceID"/>
                </PackageInstId>
                <xsl:choose>
                    <xsl:when test="substring($Start/root/pfx:POSUpgradeNoCPPRequest/pfx:serviceName,1,2)=&quot;44&quot;">
                        <ServiceName>
                            <xsl:value-of select="concat(0,substring-after($Start/root/pfx:POSUpgradeNoCPPRequest/pfx:serviceName,'44'))"/>
                        </ServiceName>
                    </xsl:when>
                    <xsl:when test="substring($Start/root/pfx:POSUpgradeNoCPPRequest/pfx:serviceName,1,3)=&quot;353&quot;">
                        <ServiceName>
                            <xsl:value-of select="concat(0,substring-after($Start/root/pfx:POSUpgradeNoCPPRequest/pfx:serviceName,'353'))"/>
                        </ServiceName>
                    </xsl:when>
                    <xsl:otherwise>
                        <ServiceName>
                            <xsl:value-of select="$Start/root/pfx:POSUpgradeNoCPPRequest/pfx:serviceName"/>
                        </ServiceName>
                    </xsl:otherwise>
                </xsl:choose>
                <EffectiveDate>
                    <xsl:value-of select="$Start/root/pfx:POSUpgradeNoCPPRequest/pfx:effectiveDate"/>
                </EffectiveDate>
                <xsl:if test="exists($Start/root/pfx:POSUpgradeNoCPPRequest/pfx:AddProduct)">
                    <AddProducts>
                        <xsl:for-each select="$Start/root/pfx:POSUpgradeNoCPPRequest/pfx:AddProduct">
                            <item>
                                <name>
                                    <xsl:value-of select="concat(&quot;value&quot;,position())"/>
                                </name>
                                <value xsi:type="ns3:TREAnyHash">
                                    <xsl:for-each select="current()/*">
                                        <xsl:if test=".!=&quot;_EMPTY_&quot;">
                                            <item>
                                                <name>
                                                    <xsl:value-of select="local-name(.)"/>
                                                </name>
                                                <xsl:choose>
                                                    <xsl:when test="local-name(.) =&quot;effectiveStartDate&quot; or local-name(.) =&quot;effectiveEndDate&quot;">
                                                        <value xsi:type="xsd:dateTime">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:when>
                                                    <xsl:when test="local-name(.) =&quot;fullyDeprovisioned&quot; or local-name(.) =&quot;productID&quot;">
                                                        <value xsi:type="xsd:int">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <value xsi:type="xsd:string">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </item>
                                        </xsl:if>
                                    </xsl:for-each>
                                </value>
                            </item>
                        </xsl:for-each>
                    </AddProducts>
                </xsl:if>
                <xsl:if test="exists($Start/root/pfx:POSUpgradeNoCPPRequest/pfx:AddCampaign)">
                    <AddCampaigns>
                        <xsl:for-each select="$Start/root/pfx:POSUpgradeNoCPPRequest/pfx:AddCampaign">
                            <item>
                                <name>
                                    <xsl:value-of select="concat(&quot;value&quot;,position())"/>
                                </name>
                                <value xsi:type="ns3:TREAnyHash">
                                    <xsl:for-each select="current()/*">
                                        <xsl:if test=".!=&quot;_EMPTY_&quot;">
                                            <item>
                                                <name>
                                                    <xsl:value-of select="local-name(.)"/>
                                                </name>
                                                <xsl:choose>
                                                    <xsl:when test="local-name(.) =&quot;effectiveStartDate&quot; or local-name(.) =&quot;effectiveEndDate&quot;">
                                                        <value xsi:type="xsd:dateTime">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:when>
                                                    <xsl:when test="local-name(.) =&quot;fullyDeprovisioned&quot; or local-name(.) =&quot;campaignID&quot;">
                                                        <value xsi:type="xsd:int">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <value xsi:type="xsd:string">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </item>
                                        </xsl:if>
                                    </xsl:for-each>
                                </value>
                            </item>
                        </xsl:for-each>
                    </AddCampaigns>
                </xsl:if>
                <xsl:if test="exists($Start/root/pfx:POSUpgradeNoCPPRequest/pfx:RemoveProduct)">
                    <RemoveProducts>
                        <xsl:for-each select="$Start/root/pfx:POSUpgradeNoCPPRequest/pfx:RemoveProduct">
                            <item>
                                <name>
                                    <xsl:value-of select="concat(&quot;value&quot;,position())"/>
                                </name>
                                <value xsi:type="ns3:TREAnyHash">
                                    <xsl:for-each select="current()/*">
                                        <xsl:if test=".!=&quot;_EMPTY_&quot;">
                                            <item>
                                                <name>
                                                    <xsl:value-of select="local-name(.)"/>
                                                </name>
                                                <xsl:choose>
                                                    <xsl:when test="local-name(.) =&quot;effectiveStartDate&quot; or local-name(.) =&quot;effectiveEndDate&quot;">
                                                        <value xsi:type="xsd:dateTime">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:when>
                                                    <xsl:when test="local-name(.) =&quot;fullyDeprovisioned&quot; or local-name(.) =&quot;productID&quot;">
                                                        <value xsi:type="xsd:int">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <value xsi:type="xsd:string">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </item>
                                        </xsl:if>
                                    </xsl:for-each>
                                </value>
                            </item>
                        </xsl:for-each>
                    </RemoveProducts>
                </xsl:if>
                <xsl:if test="exists($Start/root/pfx:POSUpgradeNoCPPRequest/pfx:RemoveCampaign)">
                    <RemoveCampaigns>
                        <xsl:for-each select="$Start/root/pfx:POSUpgradeNoCPPRequest/pfx:RemoveCampaign">
                            <item>
                                <name>
                                    <xsl:value-of select="concat(&quot;value&quot;,position())"/>
                                </name>
                                <value xsi:type="ns3:TREAnyHash">
                                    <xsl:for-each select="current()/*">
                                        <xsl:if test=".!=&quot;_EMPTY_&quot;">
                                            <item>
                                                <name>
                                                    <xsl:value-of select="local-name(.)"/>
                                                </name>
                                                <xsl:choose>
                                                    <xsl:when test="local-name(.) =&quot;effectiveStartDate&quot; or local-name(.) =&quot;effectiveEndDate&quot;">
                                                        <value xsi:type="xsd:dateTime">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:when>
                                                    <xsl:when test="local-name(.) =&quot;fullyDeprovisioned&quot; or local-name(.) =&quot;campaignID&quot;">
                                                        <value xsi:type="xsd:int">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <value xsi:type="xsd:string">
                                                            <xsl:value-of select="."/>
                                                        </value>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </item>
                                        </xsl:if>
                                    </xsl:for-each>
                                </value>
                            </item>
                        </xsl:for-each>
                    </RemoveCampaigns>
                </xsl:if>
                <Contract>
                    <xsl:for-each select="$Start/root/pfx:POSUpgradeNoCPPRequest/pfx:Contract/*">
                        <xsl:if test=".!=&quot;_EMPTY_&quot;">
                            <item>
                                <name>
                                    <xsl:value-of select="if (local-name(.)=&quot;expectedExpiryDate&quot;) then 'expectedInitialTermEndDate' else local-name(.)"/>
                                </name>
                                <xsl:choose>
                                    <xsl:when test="local-name(.) =&quot;startDate&quot; or local-name(.) =&quot;expectedExpiryDate&quot; or local-name(.) =&quot;actualExpiryDate&quot;">
                                        <value xsi:type="xsd:dateTime">
                                            <xsl:value-of select="."/>
                                        </value>
                                    </xsl:when>
                                    <xsl:when test="local-name(.) =&quot;contractStatusCode&quot; or local-name(.) =&quot;contractInitialDuration&quot; or local-name(.) =&quot;termsConditionsID&quot;">
                                        <value xsi:type="xsd:int">
                                            <xsl:choose>
                                                <xsl:when test="exists(.)">
                                                    <xsl:value-of select="."/>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </value>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <value xsi:type="xsd:string">
                                            <xsl:value-of select="."/>
                                        </value>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </item>
                        </xsl:if>
                    </xsl:for-each>
                </Contract>
                <BSO>
                    <xsl:value-of select="$Start/root/pfx:POSUpgradeNoCPPRequest/pfx:BSOName"/>
                </BSO>
                <TransactionID>
                    <xsl:value-of select="$GetContext/root/ns2:MessageContext/ns2:TransactionID"/>
                </TransactionID>
            </pfx6:fHUK__POSUpgrade__NoCPP>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="CreateResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>785</pd:x>
        <pd:y>61</pd:y>
        <config>
            <element ref="pfx:POSUpgradeNoCPPResponse"/>
        </config>
        <pd:inputBindings>
            <pfx:POSUpgradeNoCPPResponse>
                <pfx:successReturn>
                    <xsl:value-of select="$POSUpgradeNoCPP-SV-Adapter/root/ns1:fHUK__POSUpgrade__NoCPP/returnValue"/>
                </pfx:successReturn>
            </pfx:POSUpgradeNoCPPResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetContext">
        <pd:type>com.tibco.ae.tools.palettes.servicepalette.GetContextActivity</pd:type>
        <pd:resourceType>service.activity.getContext</pd:resourceType>
        <pd:x>245</pd:x>
        <pd:y>58</pd:y>
        <config>
            <variableConfig>/SharedResources/ContextResources/InputContext.contextResource</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>547</pd:x>
        <pd:y>57</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>false</validateOutput>
            <term ref="pfx6:fHUK__POSUpgrade__NoCPP"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$CamelCase-to-UpperCase/xmlString"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="POSUpgradeNoCPP SV Adapter">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>661</pd:x>
        <pd:y>68</pd:y>
        <config>
            <processName>/IntegrationServices/Billing/BillingPayment/BillingPaymentManagement/MC_SingleView_v1/POSUpgradeNoCPP/Sub/POSUpgradeNoCPP SV Adapter.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:copy-of select="$Parse-XML/pfx6:fHUK__POSUpgrade__NoCPP"/>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="TraceEnd">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>895</pd:x>
        <pd:y>59</pd:y>
        <config>
            <processName>/UtilityProcesses/Tracing/TraceEnd.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <processName>
                    <xsl:value-of select="BW:getCurrentProcessName($_processContext/ns:ProcessContext/ProcessId)"/>
                </processName>
                <response>
                    <xsl:copy-of select="$POSUpgradeNoCPP-SV-Adapter/root/ns1:fHUK__POSUpgrade__NoCPP"/>
                </response>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="TraceStart">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>142</pd:x>
        <pd:y>58</pd:y>
        <config>
            <processName>/UtilityProcesses/Tracing/TraceStart.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <processName>
                    <xsl:value-of select="BW:getCurrentProcessName($_processContext/ns:ProcessContext/ProcessId)"/>
                </processName>
                <payload>
                    <xsl:copy-of select="$Start/root/pfx:POSUpgradeNoCPPRequest"/>
                </payload>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>TraceStart</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>TraceStart</pd:from>
        <pd:to>GetContext</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CreateResponse</pd:from>
        <pd:to>TraceEnd</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>TraceEnd</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>POSUpgradeNoCPP SV Adapter</pd:from>
        <pd:to>CreateResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Create Request</pd:from>
        <pd:to>CamelCase to UpperCase</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CamelCase to UpperCase</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>POSUpgradeNoCPP SV Adapter</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetContext</pd:from>
        <pd:to>Create Request</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>