<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx="http://www.tibco.com/pe/EngineTypes">
    <xsd:import namespace="http://www.tibco.com/pe/EngineTypes" schemaLocation="/SharedResources/SchemaDefinitions/External/BW/EngineTypes.xsd"/>
    <pd:name>UtilityProcesses/Exceptions/UnitTests/FilterStackTrace.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:ErrorReport" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>150</pd:startX>
    <pd:startY>64</pd:startY>
    <pd:returnBindings>
        <root>
            <xsl:if test="exists($Start/root/pfx:ErrorReport)">
                <pfx:ErrorReport>
                    <xsl:choose>
                        <xsl:when test="exists($Map-Data/root/StackTrace)">
                            <StackTrace>
                                <xsl:value-of select="$Map-Data/root/StackTrace"/>
                            </StackTrace>
                        </xsl:when>
                        <xsl:otherwise>
                            <StackTrace>
                                <xsl:value-of select="$Reassemble-StackTrace/root/StackTrace"/>
                            </StackTrace>
                        </xsl:otherwise>
                    </xsl:choose>
                    <Msg>
                        <xsl:value-of select="$Start/root/pfx:ErrorReport/Msg"/>
                    </Msg>
                    <FullClass>
                        <xsl:value-of select="$Start/root/pfx:ErrorReport/FullClass"/>
                    </FullClass>
                    <Class>
                        <xsl:value-of select="$Start/root/pfx:ErrorReport/Class"/>
                    </Class>
                    <ProcessStack>
                        <xsl:value-of select="$Start/root/pfx:ErrorReport/ProcessStack"/>
                    </ProcessStack>
                    <xsl:if test="$Start/root/pfx:ErrorReport/MsgCode">
                        <MsgCode>
                            <xsl:value-of select="$Start/root/pfx:ErrorReport/MsgCode"/>
                        </MsgCode>
                    </xsl:if>
                    <xsl:copy-of select="$Start/root/pfx:ErrorReport/Data"/>
                </pfx:ErrorReport>
            </xsl:if>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:ErrorReport" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>531</pd:endX>
    <pd:endY>69</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1425914857305</pd:targetNamespace>
    <pd:activity name="Split StackTrace">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>283</pd:x>
        <pd:y>157</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="element" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <xsl:variable name="var" select="'&#xA;'"/>
            <root>
                <xsl:for-each select="tib:tokenize($Start/root/pfx:ErrorReport/StackTrace, $var)">
                    <xsl:if test="not(starts-with(tib:trim(current()), &quot;at&quot;))">
                        <element>
                            <xsl:value-of select="current()"/>
                        </element>
                    </xsl:if>
                </xsl:for-each>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Reassemble StackTrace">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>402</pd:x>
        <pd:y>166</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="StackTrace" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <StackTrace>
                    <xsl:value-of select="tib:concat-sequence-format($Split-StackTrace/root/element, '&#xA;', true())"/>
                </StackTrace>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>338</pd:x>
        <pd:y>317</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="StackTrace" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <StackTrace>
                    <xsl:value-of select="$_error/pfx:ErrorReport/StackTrace"/>
                </StackTrace>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Split StackTrace</pd:to>
        <pd:xpathDescription>Has StackTrace</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>exists($Start/root/pfx:ErrorReport/StackTrace)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Split StackTrace</pd:from>
        <pd:to>Reassemble StackTrace</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Reassemble StackTrace</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Split StackTrace</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Reassemble StackTrace</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>